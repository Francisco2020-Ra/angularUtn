{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, Optional, SkipSelf, Output, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport * as i3 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\n\nfunction extendStyles(dest, source, importantProperties) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n\n      if (value) {\n        dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n\n  return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\n\n\nfunction toggleNativeDragInteractions(element, enable) {\n  const userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect\n  });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\n\n\nfunction toggleVisibility(element, enable, importantProperties) {\n  extendStyles(element.style, {\n    position: enable ? '' : 'fixed',\n    top: enable ? '' : '0',\n    opacity: enable ? '' : '0',\n    left: enable ? '' : '-999em'\n  }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\n\n\nfunction combineTransforms(transform, initialTransform) {\n  return initialTransform && initialTransform != 'none' ? transform + ' ' + initialTransform : transform;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\n\n\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n\n\nfunction getTransformTransitionDurationInMs(element) {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all'); // If there's no transition for `all` or `transform`, we shouldn't do anything.\n\n  if (!property) {\n    return 0;\n  } // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n\n\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\n\n\nfunction parseCssPropertyValue(computedStyle, name) {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\n\n\nfunction getMutableClientRect(element) {\n  const clientRect = element.getBoundingClientRect(); // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height,\n    x: clientRect.x,\n    y: clientRect.y\n  };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\n\n\nfunction isInsideClientRect(clientRect, x, y) {\n  const {\n    top,\n    bottom,\n    left,\n    right\n  } = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\n\n\nfunction adjustClientRect(clientRect, top, left) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\n\n\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    width,\n    height\n  } = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\n\n\nclass ParentPositionTracker {\n  constructor(_document, _viewportRuler) {\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    /** Cached positions of the scrollable parent elements. */\n\n    this.positions = new Map();\n  }\n  /** Clears the cached positions. */\n\n\n  clear() {\n    this.positions.clear();\n  }\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n\n\n  cache(elements) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this._viewportRuler.getViewportScrollPosition()\n    });\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {\n          top: element.scrollTop,\n          left: element.scrollLeft\n        },\n        clientRect: getMutableClientRect(element)\n      });\n    });\n  }\n  /** Handles scrolling while a drag is taking place. */\n\n\n  handleScroll(event) {\n    const target = _getEventTarget(event);\n\n    const cachedPosition = this.positions.get(target);\n\n    if (!cachedPosition) {\n      return null;\n    }\n\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop;\n    let newLeft;\n\n    if (target === this._document) {\n      const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = target.scrollTop;\n      newLeft = target.scrollLeft;\n    }\n\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft; // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && target.contains(node)) {\n        adjustClientRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n    return {\n      top: topDifference,\n      left: leftDifference\n    };\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Creates a deep clone of an element. */\n\n\nfunction deepCloneNode(node) {\n  const clone = node.cloneNode(true);\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase(); // Remove the `id` to avoid having multiple elements with the same id on the page.\n\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  if (nodeName === 'canvas') {\n    transferCanvasData(node, clone);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node, clone);\n  }\n\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\n\n\nfunction transferData(selector, node, clone, callback) {\n  const descendantElements = node.querySelectorAll(selector);\n\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll(selector);\n\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n} // Counter for unique cloned radio button names.\n\n\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\n\nfunction transferInputData(source, clone) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  } // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n\n\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n/** Transfers the data of one canvas element to another. */\n\n\nfunction transferCanvasData(source, clone) {\n  const context = clone.getContext('2d');\n\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch {}\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Options that can be used to bind a passive event listener. */\n\n\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/** Options that can be used to bind an active event listener. */\n\nconst activeEventListenerOptions = normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\n\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\n\nconst dragImportantProperties = new Set([// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n'position']);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\n\nclass DragRef {\n  constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n\n    this._hasStartedDragging = false;\n    /** Emits when the item is being moved. */\n\n    this._moveEvents = new Subject();\n    /** Subscription to pointer movement events. */\n\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n\n    this._scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Cached reference to the boundary element. */\n\n    this._boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n\n    this._nativeInteractionsEnabled = true;\n    /** Elements that can be used to drag the draggable item. */\n\n    this._handles = [];\n    /** Registered handles that are currently disabled. */\n\n    this._disabledHandles = new Set();\n    /** Layout direction of the item. */\n\n    this._direction = 'ltr';\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n\n    this.dragStartDelay = 0;\n    this._disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n\n    this.beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n\n    this.started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n\n    this.released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n\n    this.ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n\n    this.entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n\n    this.exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = this._moveEvents;\n    /** Handler for the `mousedown`/`touchstart` events. */\n\n    this._pointerDown = event => {\n      this.beforeStarted.next(); // Delegate the event based on whether it started from a handle or the element itself.\n\n      if (this._handles.length) {\n        const targetHandle = this._handles.find(handle => {\n          const target = _getEventTarget(event);\n\n          return !!target && (target === handle || handle.contains(target));\n        });\n\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          this._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!this.disabled) {\n        this._initializeDragSequence(this._rootElement, event);\n      }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n\n\n    this._pointerMove = event => {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      if (!this._hasStartedDragging) {\n        const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n        const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n        const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold; // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n\n        if (isOverThreshold) {\n          const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n\n          const container = this._dropContainer;\n\n          if (!isDelayElapsed) {\n            this._endDragSequence(event);\n\n            return;\n          } // Prevent other drag sequences from starting while something in the container is still\n          // being dragged. This can happen while we're waiting for the drop animation to finish\n          // and can cause errors, because some elements might still be moving around.\n\n\n          if (!container || !container.isDragging() && !container.isReceiving()) {\n            // Prevent the default action as soon as the dragging sequence is considered as\n            // \"started\" since waiting for the next event can allow the device to begin scrolling.\n            event.preventDefault();\n            this._hasStartedDragging = true;\n\n            this._ngZone.run(() => this._startDragSequence(event));\n          }\n        }\n\n        return;\n      } // We only need the preview dimensions if we have a boundary element.\n\n\n      if (this._boundaryElement) {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || !this._previewRect.width && !this._previewRect.height) {\n          this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n        }\n      } // We prevent the default action down here so that we know that dragging has started. This is\n      // important for touch devices where doing this too early can unnecessarily block scrolling,\n      // if there's a dragging delay.\n\n\n      event.preventDefault();\n\n      const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n\n      this._hasMoved = true;\n      this._lastKnownPointerPosition = pointerPosition;\n\n      this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n      if (this._dropContainer) {\n        this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n      } else {\n        const activeTransform = this._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n\n        this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n      } // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n\n\n      if (this._moveEvents.observers.length) {\n        this._ngZone.run(() => {\n          this._moveEvents.next({\n            source: this,\n            pointerPosition: constrainedPointerPosition,\n            event,\n            distance: this._getDragDistance(constrainedPointerPosition),\n            delta: this._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n\n\n    this._pointerUp = event => {\n      this._endDragSequence(event);\n    };\n\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /** Whether starting to drag this element is disabled. */\n\n\n  get disabled() {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n\n      this._toggleNativeDragInteractions();\n\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n    }\n  }\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n\n\n  getPlaceholderElement() {\n    return this._placeholder;\n  }\n  /** Returns the root draggable element. */\n\n\n  getRootElement() {\n    return this._rootElement;\n  }\n  /**\n   * Gets the currently-visible element that represents the drag item.\n   * While dragging this is the placeholder, otherwise it's the root element.\n   */\n\n\n  getVisibleElement() {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n  /** Registers the handles that can be used to drag the element. */\n\n\n  withHandles(handles) {\n    this._handles = handles.map(handle => coerceElement(handle));\n\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n\n    this._toggleNativeDragInteractions(); // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n    // use an array internally which may throw an error.\n\n\n    const disabledHandles = new Set();\n\n    this._disabledHandles.forEach(handle => {\n      if (this._handles.indexOf(handle) > -1) {\n        disabledHandles.add(handle);\n      }\n    });\n\n    this._disabledHandles = disabledHandles;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n\n\n  withPreviewTemplate(template) {\n    this._previewTemplate = template;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n\n\n  withPlaceholderTemplate(template) {\n    this._placeholderTemplate = template;\n    return this;\n  }\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n\n\n  withRootElement(rootElement) {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      });\n\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n\n    return this;\n  }\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n\n\n  withBoundaryElement(boundaryElement) {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n\n    this._resizeSubscription.unsubscribe();\n\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler.change(10).subscribe(() => this._containInsideBoundaryOnResize());\n    }\n\n    return this;\n  }\n  /** Sets the parent ref that the ref is nested in.  */\n\n\n  withParent(parent) {\n    this._parentDragRef = parent;\n    return this;\n  }\n  /** Removes the dragging functionality from the DOM element. */\n\n\n  dispose() {\n    this._removeRootElementListeners(this._rootElement); // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n\n\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._rootElement?.remove();\n    }\n\n    this._anchor?.remove();\n\n    this._destroyPreview();\n\n    this._destroyPlaceholder();\n\n    this._dragDropRegistry.removeDragItem(this);\n\n    this._removeSubscriptions();\n\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n\n    this._moveEvents.complete();\n\n    this._handles = [];\n\n    this._disabledHandles.clear();\n\n    this._dropContainer = undefined;\n\n    this._resizeSubscription.unsubscribe();\n\n    this._parentPositions.clear();\n\n    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;\n  }\n  /** Checks whether the element is currently being dragged. */\n\n\n  isDragging() {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n  /** Resets a standalone drag item to its initial position. */\n\n\n  reset() {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n\n\n  disableHandle(handle) {\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n\n      toggleNativeDragInteractions(handle, true);\n    }\n  }\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n\n\n  enableHandle(handle) {\n    if (this._disabledHandles.has(handle)) {\n      this._disabledHandles.delete(handle);\n\n      toggleNativeDragInteractions(handle, this.disabled);\n    }\n  }\n  /** Sets the layout direction of the draggable item. */\n\n\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /** Sets the container that the item is part of. */\n\n\n  _withDropContainer(container) {\n    this._dropContainer = container;\n  }\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n\n\n  getFreeDragPosition() {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {\n      x: position.x,\n      y: position.y\n    };\n  }\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n\n\n  setFreeDragPosition(value) {\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n  /**\n   * Sets the container into which to insert the preview element.\n   * @param value Container into which to insert the preview.\n   */\n\n\n  withPreviewContainer(value) {\n    this._previewContainer = value;\n    return this;\n  }\n  /** Updates the item's sort order based on the last-known pointer position. */\n\n\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n  /** Unsubscribes from the global subscriptions. */\n\n\n  _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n\n    this._pointerUpSubscription.unsubscribe();\n\n    this._scrollSubscription.unsubscribe();\n  }\n  /** Destroys the preview element and its ViewRef. */\n\n\n  _destroyPreview() {\n    this._preview?.remove();\n    this._previewRef?.destroy();\n    this._preview = this._previewRef = null;\n  }\n  /** Destroys the placeholder element and its ViewRef. */\n\n\n  _destroyPlaceholder() {\n    this._placeholder?.remove();\n    this._placeholderRef?.destroy();\n    this._placeholder = this._placeholderRef = null;\n  }\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n\n\n  _endDragSequence(event) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n\n    this._dragDropRegistry.stopDragging(this);\n\n    this._toggleNativeDragInteractions();\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({\n      source: this\n    });\n\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n\n        this._cleanupCachedDimensions();\n\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      this._passiveTransform.y = this._activeTransform.y;\n\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(pointerPosition),\n          dropPoint: pointerPosition\n        });\n      });\n\n      this._cleanupCachedDimensions();\n\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n  /** Starts the dragging sequence. */\n\n\n  _startDragSequence(event) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    this._toggleNativeDragInteractions();\n\n    const dropContainer = this._dropContainer;\n\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode;\n\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      const anchor = this._anchor = this._anchor || this._document.createComment(''); // Needs to happen before the root element is moved.\n\n\n      const shadowRoot = this._getShadowRoot(); // Insert an anchor node so that we can restore the element's position in the DOM.\n\n\n      parent.insertBefore(anchor, element); // There's no risk of transforms stacking when inside a drop container so\n      // we can keep the initial transform up to date any time dragging starts.\n\n      this._initialTransform = element.style.transform || ''; // Create the preview after the initial transform has\n      // been cached, because it can be affected by the transform.\n\n      this._preview = this._createPreviewElement(); // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n\n      toggleVisibility(element, false, dragImportantProperties);\n\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n\n      this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n\n      this.started.next({\n        source: this\n      }); // Emit before notifying the container.\n\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({\n        source: this\n      });\n      this._initialContainer = this._initialIndex = undefined;\n    } // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n\n\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n\n\n  _initializeDragSequence(referenceElement, event) {\n    // Stop propagation if the item is inside another\n    // draggable so we don't start multiple drag sequences.\n    if (this._parentDragRef) {\n      event.stopPropagation();\n    }\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n    const rootElement = this._rootElement;\n\n    const target = _getEventTarget(event);\n\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n    const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) : isFakeMousedownFromScreenReader(event); // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n\n    if (target && target.draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    } // Abort if the user is already dragging or is using a mouse button other than the primary one.\n\n\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n      return;\n    } // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n\n\n    if (this._handles.length) {\n      const rootStyles = rootElement.style;\n      this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n      rootStyles.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false; // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n\n    this._removeSubscriptions();\n\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    } // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n\n\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {\n      x: 0,\n      y: 0\n    } : this._getPointerPositionInElement(referenceElement, event);\n\n    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);\n\n    this._pointerDirectionDelta = {\n      x: 0,\n      y: 0\n    };\n    this._pointerPositionAtLastDirectionChange = {\n      x: pointerPosition.x,\n      y: pointerPosition.y\n    };\n    this._dragStartTime = Date.now();\n\n    this._dragDropRegistry.startDragging(this, event);\n  }\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n\n\n  _cleanupDragArtifacts(event) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true, dragImportantProperties);\n\n    this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n\n    this._destroyPreview();\n\n    this._destroyPlaceholder();\n\n    this._boundaryRect = this._previewRect = this._initialTransform = undefined; // Re-enter the NgZone since we bound `document` events on the outside.\n\n    this._ngZone.run(() => {\n      const container = this._dropContainer;\n      const currentIndex = container.getItemIndex(this);\n\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      const distance = this._getDragDistance(pointerPosition);\n\n      const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n\n      this.ended.next({\n        source: this,\n        distance,\n        dropPoint: pointerPosition\n      });\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        dropPoint: pointerPosition\n      });\n      container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n\n\n  _updateActiveDropContainer({\n    x,\n    y\n  }, {\n    x: rawX,\n    y: rawY\n  }) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y); // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n\n\n    if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({\n          item: this,\n          container: this._dropContainer\n        });\n\n        this._dropContainer.exit(this); // Notify the new container that the item has entered.\n\n\n        this._dropContainer = newContainer;\n\n        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer && // If we're re-entering the initial container and sorting is disabled,\n        // put item the into its starting index to begin with.\n        newContainer.sortingDisabled ? this._initialIndex : undefined);\n\n        this.entered.next({\n          item: this,\n          container: newContainer,\n          currentIndex: newContainer.getItemIndex(this)\n        });\n      });\n    } // Dragging may have been interrupted as a result of the events above.\n\n\n    if (this.isDragging()) {\n      this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n\n      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n\n      this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n  }\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n\n\n  _createPreviewElement() {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this.previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview;\n\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewRef = viewRef;\n\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect);\n      } else {\n        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n      }\n    } else {\n      const element = this._rootElement;\n      preview = deepCloneNode(element);\n      matchElementSize(preview, element.getBoundingClientRect());\n\n      if (this._initialTransform) {\n        preview.style.transform = this._initialTransform;\n      }\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      'pointer-events': 'none',\n      // We have to reset the margin, because it can throw off positioning relative to the viewport.\n      'margin': '0',\n      'position': 'fixed',\n      'top': '0',\n      'left': '0',\n      'z-index': `${this._config.zIndex || 1000}`\n    }, dragImportantProperties);\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n\n    return preview;\n  }\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n\n\n  _animatePreviewToPlaceholder() {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect(); // Apply the class that adds a transition to the preview.\n\n\n    this._preview.classList.add('cdk-drag-animating'); // Move the preview to the placeholder position.\n\n\n    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top); // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n\n\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = event => {\n          if (!event || _getEventTarget(event) === this._preview && event.propertyName === 'transform') {\n            this._preview?.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }; // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n\n\n        const timeout = setTimeout(handler, duration * 1.5);\n\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n  /** Creates an element that will be shown instead of the current element while dragging. */\n\n\n  _createPlaceholderElement() {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n\n      this._placeholderRef.detectChanges();\n\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n\n\n  _getPointerPositionInElement(referenceElement, event) {\n    const elementRect = this._rootElement.getBoundingClientRect();\n\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n\n    const scrollPosition = this._getViewportScrollPosition();\n\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n  /** Determines the point of the page that was touched by the user. */\n\n\n  _getPointerPositionOnPage(event) {\n    const scrollPosition = this._getViewportScrollPosition();\n\n    const point = isTouchEvent(event) ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n    // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n    // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n    // throwing an error. The value returned here will be incorrect, but since this only\n    // breaks inside a developer tool and the value is only used for secondary information,\n    // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n    event.touches[0] || event.changedTouches[0] || {\n      pageX: 0,\n      pageY: 0\n    } : event;\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top; // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n\n\n  _getConstrainedPointerPosition(point) {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {\n      x,\n      y\n    } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {\n        x: pickupX,\n        y: pickupY\n      } = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n      x = clamp$1(x, minX, maxX);\n      y = clamp$1(y, minY, maxY);\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n\n\n  _updatePointerDirectionDelta(pointerPositionOnPage) {\n    const {\n      x,\n      y\n    } = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange; // Amount of pixels the user has dragged since the last time the direction changed.\n\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y); // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n\n\n  _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n  /** Removes the manually-added event listeners from the root element. */\n\n\n  _removeRootElementListeners(element) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n\n\n  _applyRootElementTransform(x, y) {\n    const transform = getTransform(x, y);\n    const styles = this._rootElement.style; // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    // Should be excluded none because none + translate3d(x, y, x) is invalid css\n\n    if (this._initialTransform == null) {\n      this._initialTransform = styles.transform && styles.transform != 'none' ? styles.transform : '';\n    } // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n\n\n    styles.transform = combineTransforms(transform, this._initialTransform);\n  }\n  /**\n   * Applies a `transform` to the preview, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n\n\n  _applyPreviewTransform(x, y) {\n    // Only apply the initial transform if the preview is a clone of the original element, otherwise\n    // it could be completely different and the transform might not make sense anymore.\n    const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n    const transform = getTransform(x, y);\n    this._preview.style.transform = combineTransforms(transform, initialTransform);\n  }\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n\n\n  _getDragDistance(currentPosition) {\n    const pickupPosition = this._pickupPositionOnPage;\n\n    if (pickupPosition) {\n      return {\n        x: currentPosition.x - pickupPosition.x,\n        y: currentPosition.y - pickupPosition.y\n      };\n    }\n\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n\n\n  _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n\n    this._parentPositions.clear();\n  }\n  /**\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\n   * If not, the position is adjusted so that the element fits again.\n   */\n\n\n  _containInsideBoundaryOnResize() {\n    let {\n      x,\n      y\n    } = this._passiveTransform;\n\n    if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {\n      return;\n    }\n\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\n\n    const elementRect = this._rootElement.getBoundingClientRect(); // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n\n\n    if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {\n      return;\n    }\n\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom; // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    } // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n\n\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({\n        y,\n        x\n      });\n    }\n  }\n  /** Gets the drag start delay, based on the event type. */\n\n\n  _getDragStartDelay(event) {\n    const value = this.dragStartDelay;\n\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n\n    return value ? value.mouse : 0;\n  }\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n\n\n  _updateOnScroll(event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n\n    if (scrollDifference) {\n      const target = _getEventTarget(event); // ClientRect dimensions are based on the scroll position of the page and its parent\n      // node so we have to update the cached boundary ClientRect if the user has scrolled.\n\n\n      if (this._boundaryRect && target !== this._boundaryElement && target.contains(this._boundaryElement)) {\n        adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top; // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n  /** Gets the scroll position of the viewport. */\n\n\n  _getViewportScrollPosition() {\n    const cachedPosition = this._parentPositions.positions.get(this._document);\n\n    return cachedPosition ? cachedPosition.scrollPosition : this._viewportRuler.getViewportScrollPosition();\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n\n\n  _getShadowRoot() {\n    if (this._cachedShadowRoot === undefined) {\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n    }\n\n    return this._cachedShadowRoot;\n  }\n  /** Gets the element into which the drag preview should be inserted. */\n\n\n  _getPreviewInsertionPoint(initialParent, shadowRoot) {\n    const previewContainer = this._previewContainer || 'global';\n\n    if (previewContainer === 'parent') {\n      return initialParent;\n    }\n\n    if (previewContainer === 'global') {\n      const documentRef = this._document; // We can't use the body if the user is in fullscreen mode,\n      // because the preview will render under the fullscreen element.\n      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n\n      return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;\n    }\n\n    return coerceElement(previewContainer);\n  }\n\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\n\n\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\n\n\nfunction clamp$1(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\n\n\nfunction getRootNode(viewRef, _document) {\n  const rootNodes = viewRef.rootNodes;\n\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0];\n  }\n\n  const wrapper = _document.createElement('div');\n\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\n\n\nfunction matchElementSize(target, sourceRect) {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\n\n\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\n\n\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\n\n\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/** Clamps a number between zero and a maximum. */\n\n\nfunction clamp(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\n\n\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\n\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\n\nclass DropListRef {\n  constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n    this._dragDropRegistry = _dragDropRegistry;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    /** Whether starting a dragging sequence from this container is disabled. */\n\n    this.disabled = false;\n    /** Whether sorting items within the list is disabled. */\n\n    this.sortingDisabled = false;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n\n    this.autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n\n    this.autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n    this.sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n\n\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n\n    this.dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n\n    this.sorted = new Subject();\n    /** Whether an item in the list is being dragged. */\n\n    this._isDragging = false;\n    /** Cache of the dimensions of all the items inside the container. */\n\n    this._itemPositions = [];\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occured and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n\n    this._previousSwap = {\n      drag: null,\n      delta: 0,\n      overlaps: false\n    };\n    /** Draggable items in the container. */\n\n    this._draggables = [];\n    /** Drop lists that are connected to the current one. */\n\n    this._siblings = [];\n    /** Direction in which the list is oriented. */\n\n    this._orientation = 'vertical';\n    /** Connected siblings that currently have a dragged item. */\n\n    this._activeSiblings = new Set();\n    /** Layout direction of the drop list. */\n\n    this._direction = 'ltr';\n    /** Subscription to the window being scrolled. */\n\n    this._viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n\n    this._verticalScrollDirection = 0\n    /* NONE */\n    ;\n    /** Horizontal direction in which the list is currently scrolling. */\n\n    this._horizontalScrollDirection = 0\n    /* NONE */\n    ;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n\n    this._stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n\n    this._cachedShadowRoot = null;\n    /** Starts the interval that'll auto-scroll the element. */\n\n    this._startScrollInterval = () => {\n      this._stopScrolling();\n\n      interval(0, animationFrameScheduler).pipe(takeUntil(this._stopScrollTimers)).subscribe(() => {\n        const node = this._scrollNode;\n        const scrollStep = this.autoScrollStep;\n\n        if (this._verticalScrollDirection === 1\n        /* UP */\n        ) {\n          node.scrollBy(0, -scrollStep);\n        } else if (this._verticalScrollDirection === 2\n        /* DOWN */\n        ) {\n          node.scrollBy(0, scrollStep);\n        }\n\n        if (this._horizontalScrollDirection === 1\n        /* LEFT */\n        ) {\n          node.scrollBy(-scrollStep, 0);\n        } else if (this._horizontalScrollDirection === 2\n        /* RIGHT */\n        ) {\n          node.scrollBy(scrollStep, 0);\n        }\n      });\n    };\n\n    this.element = coerceElement(element);\n    this._document = _document;\n    this.withScrollableParents([this.element]);\n\n    _dragDropRegistry.registerDropContainer(this);\n\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n  }\n  /** Removes the drop list functionality from the DOM element. */\n\n\n  dispose() {\n    this._stopScrolling();\n\n    this._stopScrollTimers.complete();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n\n    this._activeSiblings.clear();\n\n    this._scrollNode = null;\n\n    this._parentPositions.clear();\n\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n  /** Whether an item from this list is currently being dragged. */\n\n\n  isDragging() {\n    return this._isDragging;\n  }\n  /** Starts dragging an item. */\n\n\n  start() {\n    this._draggingStarted();\n\n    this._notifyReceivingSiblings();\n  }\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n\n\n  enter(item, pointerX, pointerY, index) {\n    this._draggingStarted(); // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n\n\n    let newIndex;\n\n    if (index == null) {\n      newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n      if (newIndex === -1) {\n        // We use the coordinates of where the item entered the drop\n        // zone to figure out at which index it should be inserted.\n        newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n      }\n    } else {\n      newIndex = index;\n    }\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference = activeDraggables[newIndex]; // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    } // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n\n\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    } // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n\n\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n      const reference = activeDraggables[0].getRootElement();\n      reference.parentNode.insertBefore(placeholder, reference);\n      activeDraggables.unshift(item);\n    } else {\n      coerceElement(this.element).appendChild(placeholder);\n      activeDraggables.push(item);\n    } // The transform needs to be cleared so it doesn't throw off the measurements.\n\n\n    placeholder.style.transform = ''; // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed and also parent rects.\n\n    this._cacheItemPositions();\n\n    this._cacheParentPositions(); // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n\n\n    this._notifyReceivingSiblings();\n\n    this.entered.next({\n      item,\n      container: this,\n      currentIndex: this.getItemIndex(item)\n    });\n  }\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n\n\n  exit(item) {\n    this._reset();\n\n    this.exited.next({\n      item,\n      container: this\n    });\n  }\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousIndex Index of the item when dragging started.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   */\n\n\n  drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n    this._reset();\n\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance,\n      dropPoint\n    });\n  }\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n\n\n  withItems(items) {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging()); // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._cacheItems();\n      }\n    }\n\n    return this;\n  }\n  /** Sets the layout direction of the drop list. */\n\n\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n\n\n  connectedTo(connectedTo) {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n\n\n  withOrientation(orientation) {\n    this._orientation = orientation;\n    return this;\n  }\n  /**\n   * Sets which parent elements are can be scrolled while the user is dragging.\n   * @param elements Elements that can be scrolled.\n   */\n\n\n  withScrollableParents(elements) {\n    const element = coerceElement(this.element); // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n\n    this._scrollableElements = elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n  /** Gets the scrollable parents that are registered with this drop container. */\n\n\n  getScrollableParents() {\n    return this._scrollableElements;\n  }\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n\n\n  getItemIndex(item) {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    } // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n\n\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n    return items.findIndex(currentItem => currentItem.drag === item);\n  }\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n\n\n  isReceiving() {\n    return this._activeSiblings.size > 0;\n  }\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n\n\n  _sortItem(item, pointerX, pointerY, pointerDelta) {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._clientRect || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1; // How many pixels the item's placeholder should be offset.\n\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta); // How many pixels all the other items should be offset.\n\n\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta); // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n\n\n    const oldOrder = siblings.slice(); // Shuffle the array in place.\n\n    moveItemInArray(siblings, currentIndex, newIndex);\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement(); // Update the offset to reflect the new position.\n\n      sibling.offset += offset; // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    }); // Note that it's important that we do this after the client rects have been adjusted.\n\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n  }\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n\n\n  _startScrollingIfNecessary(pointerX, pointerY) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n\n    let scrollNode;\n    let verticalScrollDirection = 0\n    /* NONE */\n    ;\n    let horizontalScrollDirection = 0\n    /* NONE */\n    ; // Check whether we should start scrolling any of the parent containers.\n\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n\n      if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element;\n        }\n      }\n    }); // Otherwise check if we can start scrolling the viewport.\n\n\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {\n        width,\n        height\n      } = this._viewportRuler.getViewportSize();\n\n      const clientRect = {\n        width,\n        height,\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0\n      };\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n      scrollNode = window;\n    }\n\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n  /** Stops any currently-running auto-scroll sequences. */\n\n\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n  /** Starts the dragging sequence within the list. */\n\n\n  _draggingStarted() {\n    const styles = coerceElement(this.element).style;\n    this.beforeStarted.next();\n    this._isDragging = true; // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n\n    this._cacheItems();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this._listenToScrollEvents();\n  }\n  /** Caches the positions of the configured scrollable parents. */\n\n\n  _cacheParentPositions() {\n    const element = coerceElement(this.element);\n\n    this._parentPositions.cache(this._scrollableElements); // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `ClientRect`.\n\n\n    this._clientRect = this._parentPositions.positions.get(element).clientRect;\n  }\n  /** Refreshes the position cache of the items and sibling containers. */\n\n\n  _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = drag.getVisibleElement();\n      return {\n        drag,\n        offset: 0,\n        initialTransform: elementToMeasure.style.transform || '',\n        clientRect: getMutableClientRect(elementToMeasure)\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n    });\n  }\n  /** Resets the container to its initial state. */\n\n\n  _reset() {\n    this._isDragging = false;\n    const styles = coerceElement(this.element).style;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap; // TODO(crisbeto): may have to wait for the animations to finish.\n\n    this._activeDraggables.forEach(item => {\n      const rootElement = item.getRootElement();\n\n      if (rootElement) {\n        const initialTransform = this._itemPositions.find(current => current.drag === item)?.initialTransform;\n        rootElement.style.transform = initialTransform || '';\n      }\n    });\n\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n\n    this._stopScrolling();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this._parentPositions.clear();\n  }\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n\n\n  _getSiblingOffsetPx(currentIndex, siblings, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom'; // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n\n\n  _getItemOffsetPx(currentPosition, newPosition, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top; // Account for differences in the item width/height.\n\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n  /**\n   * Checks if pointer is entering in the first position\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n\n\n  _shouldEnterAsFirstChild(pointerX, pointerY) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this._orientation === 'horizontal'; // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n\n\n  _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    const index = this._itemPositions.findIndex(({\n      drag,\n      clientRect\n    }) => {\n      // Skip the item itself.\n      if (drag === item) {\n        return false;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y; // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n\n        if (drag === this._previousSwap.drag && this._previousSwap.overlaps && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ? // Round these down since most browsers report client rects with\n      // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n      pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n\n    return index === -1 || !this.sortPredicate(index, item, this) ? -1 : index;\n  }\n  /** Caches the current items in the list and their positions. */\n\n\n  _cacheItems() {\n    this._activeDraggables = this._draggables.slice();\n\n    this._cacheItemPositions();\n\n    this._cacheParentPositions();\n  }\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n\n\n  _isOverContainer(x, y) {\n    return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n  }\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n\n\n  _getSiblingContainerFromPosition(item, x, y) {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n\n\n  _canReceive(item, x, y) {\n    if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n      return false;\n    }\n\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y); // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n\n\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    const nativeElement = coerceElement(this.element); // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n  }\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n\n\n  _startReceiving(sibling, items) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling) && items.every(item => {\n      // Note that we have to add an exception to the `enterPredicate` for items that started off\n      // in this drop list. The drag ref has logic that allows an item to return to its initial\n      // container, if it has left the initial container and none of the connected containers\n      // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n    })) {\n      activeSiblings.add(sibling);\n\n      this._cacheParentPositions();\n\n      this._listenToScrollEvents();\n    }\n  }\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n\n\n  _stopReceiving(sibling) {\n    this._activeSiblings.delete(sibling);\n\n    this._viewportScrollSubscription.unsubscribe();\n  }\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n\n\n  _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(event => {\n      if (this.isDragging()) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n\n        if (scrollDifference) {\n          // Since we know the amount that the user has scrolled we can shift all of the\n          // client rectangles ourselves. This is cheaper than re-measuring everything and\n          // we can avoid inconsistent behavior where we might be measuring the element before\n          // its position has changed.\n          this._itemPositions.forEach(({\n            clientRect\n          }) => {\n            adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n          }); // We need two loops for this, because we want all of the cached\n          // positions to be up-to-date before we re-sort the item.\n\n\n          this._itemPositions.forEach(({\n            drag\n          }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n              // We need to re-sort the item manually, because the pointer move\n              // events won't be dispatched while the user is scrolling.\n              drag._sortFromLastPointerPosition();\n            }\n          });\n        }\n      } else if (this.isReceiving()) {\n        this._cacheParentPositions();\n      }\n    });\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n\n\n  _getShadowRoot() {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(coerceElement(this.element));\n\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n\n    return this._cachedShadowRoot;\n  }\n  /** Notifies any siblings that may potentially receive the item. */\n\n\n  _notifyReceivingSiblings() {\n    const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n  }\n\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n  const {\n    top,\n    bottom,\n    height\n  } = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return 1\n    /* UP */\n    ;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return 2\n    /* DOWN */\n    ;\n  }\n\n  return 0\n  /* NONE */\n  ;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\n\n\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n  const {\n    left,\n    right,\n    width\n  } = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return 1\n    /* LEFT */\n    ;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return 2\n    /* RIGHT */\n    ;\n  }\n\n  return 0\n  /* NONE */\n  ;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = 0\n  /* NONE */\n  ;\n  let horizontalScrollDirection = 0\n  /* NONE */\n  ; // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n\n    if (computedVertical === 1\n    /* UP */\n    ) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = 1\n        /* UP */\n        ;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = 2\n      /* DOWN */\n      ;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n\n    if (computedHorizontal === 1\n    /* LEFT */\n    ) {\n      if (scrollLeft > 0) {\n        horizontalScrollDirection = 1\n        /* LEFT */\n        ;\n      }\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = 2\n      /* RIGHT */\n      ;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event options that can be used to bind an active, capturing event. */\n\n\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n\nclass DragDropRegistry {\n  constructor(_ngZone, _document) {\n    this._ngZone = _ngZone;\n    /** Registered drop container instances. */\n\n    this._dropInstances = new Set();\n    /** Registered drag item instances. */\n\n    this._dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n\n    this._activeDragInstances = [];\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n\n    this._globalListeners = new Map();\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n\n    this._draggingPredicate = item => item.isDragging();\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n\n\n    this.pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n\n    this.pointerUp = new Subject();\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n     * @breaking-change 13.0.0\n     */\n\n    this.scroll = new Subject();\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n\n    this._preventDefaultWhileDragging = event => {\n      if (this._activeDragInstances.length > 0) {\n        event.preventDefault();\n      }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n\n\n    this._persistentTouchmoveListener = event => {\n      if (this._activeDragInstances.length > 0) {\n        // Note that we only want to prevent the default action after dragging has actually started.\n        // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n        // but it could be pushed back if the user has set up a drag delay or threshold.\n        if (this._activeDragInstances.some(this._draggingPredicate)) {\n          event.preventDefault();\n        }\n\n        this.pointerMove.next(event);\n      }\n    };\n\n    this._document = _document;\n  }\n  /** Adds a drop container to the registry. */\n\n\n  registerDropContainer(drop) {\n    if (!this._dropInstances.has(drop)) {\n      this._dropInstances.add(drop);\n    }\n  }\n  /** Adds a drag item instance to the registry. */\n\n\n  registerDragItem(drag) {\n    this._dragInstances.add(drag); // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n\n\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n      });\n    }\n  }\n  /** Removes a drop container from the registry. */\n\n\n  removeDropContainer(drop) {\n    this._dropInstances.delete(drop);\n  }\n  /** Removes a drag item instance from the registry. */\n\n\n  removeDragItem(drag) {\n    this._dragInstances.delete(drag);\n\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n    }\n  }\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n\n\n  startDragging(drag, event) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances.indexOf(drag) > -1) {\n      return;\n    }\n\n    this._activeDragInstances.push(drag);\n\n    if (this._activeDragInstances.length === 1) {\n      const isTouchEvent = event.type.startsWith('touch'); // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n\n      this._globalListeners.set(isTouchEvent ? 'touchend' : 'mouseup', {\n        handler: e => this.pointerUp.next(e),\n        options: true\n      }).set('scroll', {\n        handler: e => this.scroll.next(e),\n        // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n        // the document. See https://github.com/angular/components/issues/17144.\n        options: true\n      }) // Preventing the default action on `mousemove` isn't enough to disable text selection\n      // on Safari so we need to prevent the selection event as well. Alternatively this can\n      // be done by setting `user-select: none` on the `body`, however it has causes a style\n      // recalculation which can be expensive on pages with a lot of elements.\n      .set('selectstart', {\n        handler: this._preventDefaultWhileDragging,\n        options: activeCapturingEventOptions\n      }); // We don't have to bind a move event for touch drag sequences, because\n      // we already have a persistent global one bound from `registerDragItem`.\n\n\n      if (!isTouchEvent) {\n        this._globalListeners.set('mousemove', {\n          handler: e => this.pointerMove.next(e),\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n  /** Stops dragging a drag item instance. */\n\n\n  stopDragging(drag) {\n    const index = this._activeDragInstances.indexOf(drag);\n\n    if (index > -1) {\n      this._activeDragInstances.splice(index, 1);\n\n      if (this._activeDragInstances.length === 0) {\n        this._clearGlobalListeners();\n      }\n    }\n  }\n  /** Gets whether a drag item instance is currently being dragged. */\n\n\n  isDragging(drag) {\n    return this._activeDragInstances.indexOf(drag) > -1;\n  }\n  /**\n   * Gets a stream that will emit when any element on the page is scrolled while an item is being\n   * dragged.\n   * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n   *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n   *   be used to include an additional top-level listener at the shadow root level.\n   */\n\n\n  scrolled(shadowRoot) {\n    const streams = [this.scroll];\n\n    if (shadowRoot && shadowRoot !== this._document) {\n      // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n      // because we want to guarantee that the event is bound outside of the `NgZone`. With\n      // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n      streams.push(new Observable(observer => {\n        return this._ngZone.runOutsideAngular(() => {\n          const eventOptions = true;\n\n          const callback = event => {\n            if (this._activeDragInstances.length) {\n              observer.next(event);\n            }\n          };\n\n          shadowRoot.addEventListener('scroll', callback, eventOptions);\n          return () => {\n            shadowRoot.removeEventListener('scroll', callback, eventOptions);\n          };\n        });\n      }));\n    }\n\n    return merge(...streams);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n\n    this._clearGlobalListeners();\n\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n  /** Clears out the global event listeners from the `document`. */\n\n\n  _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n\n}\n\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {\n  return new (t || DragDropRegistry)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\n\nDragDropRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DragDropRegistry,\n  factory: DragDropRegistry.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDropRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Default configuration to be used when creating a `DragRef`. */\n\n\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n\nclass DragDrop {\n  constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n  }\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n\n\n  createDrag(element, config = DEFAULT_CONFIG) {\n    return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n  }\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n\n\n  createDropList(element) {\n    return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n  }\n\n}\n\nDragDrop.ɵfac = function DragDrop_Factory(t) {\n  return new (t || DragDrop)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(DragDropRegistry));\n};\n\nDragDrop.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DragDrop,\n  factory: DragDrop.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDrop, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: DragDropRegistry\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\n\n\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n\nclass CdkDropListGroup {\n  constructor() {\n    /** Drop lists registered inside the group. */\n    this._items = new Set();\n    this._disabled = false;\n  }\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n\n}\n\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {\n  return new (t || CdkDropListGroup)();\n};\n\nCdkDropListGroup.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDropListGroup,\n  selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n  inputs: {\n    disabled: [\"cdkDropListGroupDisabled\", \"disabled\"]\n  },\n  exportAs: [\"cdkDropListGroup\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DROP_LIST_GROUP,\n    useExisting: CdkDropListGroup\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDropListGroup, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropListGroup]',\n      exportAs: 'cdkDropListGroup',\n      providers: [{\n        provide: CDK_DROP_LIST_GROUP,\n        useExisting: CdkDropListGroup\n      }]\n    }]\n  }], null, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListGroupDisabled']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\n\n\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\n\nfunction assertElementNode(node, name) {\n  if (node.nodeType !== 1) {\n    throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique ids for drop zones. */\n\n\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Container that wraps a set of draggable items. */\n\nclass CdkDropList {\n  constructor(\n  /** Element that the drop list is attached to. */\n  element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n    this.element = element;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._dir = _dir;\n    this._group = _group;\n    /** Emits when the list has been destroyed. */\n\n    this._destroyed = new Subject();\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n\n    this.connectedTo = [];\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n\n    this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n    this.sortPredicate = () => true;\n    /** Emits when the user drops an item inside the container. */\n\n\n    this.dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n\n    this.sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n\n    this._unsortedItems = new Set();\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(element.nativeElement, 'cdkDropList');\n    }\n\n    this._dropListRef = dragDrop.createDropList(element);\n    this._dropListRef.data = this;\n\n    if (config) {\n      this._assignDefaults(config);\n    }\n\n    this._dropListRef.enterPredicate = (drag, drop) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._dropListRef.sortPredicate = (index, drag, drop) => {\n      return this.sortPredicate(index, drag.data, drop.data);\n    };\n\n    this._setupInputSyncSubscription(this._dropListRef);\n\n    this._handleEvents(this._dropListRef);\n\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n  /** Whether starting a dragging sequence from this container is disabled. */\n\n\n  get disabled() {\n    return this._disabled || !!this._group && this._group.disabled;\n  }\n\n  set disabled(value) {\n    // Usually we sync the directive and ref state right before dragging starts, in order to have\n    // a single point of failure and to avoid having to use setters for everything. `disabled` is\n    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n    // the user in a disabled state, so we also need to sync it as it's being set.\n    this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n  }\n  /** Registers an items with the drop list. */\n\n\n  addItem(item) {\n    this._unsortedItems.add(item);\n\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n  /** Removes an item from the drop list. */\n\n\n  removeItem(item) {\n    this._unsortedItems.delete(item);\n\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n  /** Gets the registered items in the list, sorted by their position in the DOM. */\n\n\n  getSortedItems() {\n    return Array.from(this._unsortedItems).sort((a, b) => {\n      const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement()); // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n      // tslint:disable-next-line:no-bitwise\n\n\n      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n    });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._unsortedItems.clear();\n\n    this._dropListRef.dispose();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n\n\n  _setupInputSyncSubscription(ref) {\n    if (this._dir) {\n      this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        if (typeof drop === 'string') {\n          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n\n          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n          }\n\n          return correspondingDropList;\n        }\n\n        return drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      } // Note that we resolve the scrollable parents here so that we delay the resolution\n      // as long as possible, ensuring that the element is in its final place in the DOM.\n\n\n      if (!this._scrollableParentsResolved) {\n        const scrollableParents = this._scrollDispatcher.getAncestorScrollContainers(this.element).map(scrollable => scrollable.getElementRef().nativeElement);\n\n        this._dropListRef.withScrollableParents(scrollableParents); // Only do this once since it involves traversing the DOM and the parents\n        // shouldn't be able to change without the drop list being destroyed.\n\n\n        this._scrollableParentsResolved = true;\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n      ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n      ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n      ref.connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef)).withOrientation(this.orientation);\n    });\n  }\n  /** Handles events from the underlying DropListRef. */\n\n\n  _handleEvents(ref) {\n    ref.beforeStarted.subscribe(() => {\n      this._syncItemsWithRef();\n\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex\n      });\n    });\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        distance: event.distance,\n        dropPoint: event.dropPoint\n      }); // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n  /** Assigns the default input values based on a provided config object. */\n\n\n  _assignDefaults(config) {\n    const {\n      lockAxis,\n      draggingDisabled,\n      sortingDisabled,\n      listAutoScrollDisabled,\n      listOrientation\n    } = config;\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n    this.orientation = listOrientation || 'vertical';\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n  }\n  /** Syncs up the registered drag items with underlying drop list ref. */\n\n\n  _syncItemsWithRef() {\n    this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n  }\n\n}\n/** Keeps track of the drop lists that are currently on the page. */\n\n\nCdkDropList._dropLists = [];\n\nCdkDropList.ɵfac = function CdkDropList_Factory(t) {\n  return new (t || CdkDropList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DragDrop), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), i0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));\n};\n\nCdkDropList.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDropList,\n  selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n  hostAttrs: [1, \"cdk-drop-list\"],\n  hostVars: 7,\n  hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id);\n      i0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    }\n  },\n  inputs: {\n    connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"],\n    data: [\"cdkDropListData\", \"data\"],\n    orientation: [\"cdkDropListOrientation\", \"orientation\"],\n    id: \"id\",\n    lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"],\n    disabled: [\"cdkDropListDisabled\", \"disabled\"],\n    sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"],\n    enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"],\n    sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"],\n    autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"],\n    autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"]\n  },\n  outputs: {\n    dropped: \"cdkDropListDropped\",\n    entered: \"cdkDropListEntered\",\n    exited: \"cdkDropListExited\",\n    sorted: \"cdkDropListSorted\"\n  },\n  exportAs: [\"cdkDropList\"],\n  features: [i0.ɵɵProvidersFeature([// Prevent child drop lists from picking up the same group as their parent.\n  {\n    provide: CDK_DROP_LIST_GROUP,\n    useValue: undefined\n  }, {\n    provide: CDK_DROP_LIST,\n    useExisting: CdkDropList\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDropList, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropList], cdk-drop-list',\n      exportAs: 'cdkDropList',\n      providers: [// Prevent child drop lists from picking up the same group as their parent.\n      {\n        provide: CDK_DROP_LIST_GROUP,\n        useValue: undefined\n      }, {\n        provide: CDK_DROP_LIST,\n        useExisting: CdkDropList\n      }],\n      host: {\n        'class': 'cdk-drop-list',\n        '[attr.id]': 'id',\n        '[class.cdk-drop-list-disabled]': 'disabled',\n        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: DragDrop\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: CdkDropListGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DROP_LIST_GROUP]\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }];\n  }, {\n    connectedTo: [{\n      type: Input,\n      args: ['cdkDropListConnectedTo']\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDropListData']\n    }],\n    orientation: [{\n      type: Input,\n      args: ['cdkDropListOrientation']\n    }],\n    id: [{\n      type: Input\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDropListLockAxis']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListDisabled']\n    }],\n    sortingDisabled: [{\n      type: Input,\n      args: ['cdkDropListSortingDisabled']\n    }],\n    enterPredicate: [{\n      type: Input,\n      args: ['cdkDropListEnterPredicate']\n    }],\n    sortPredicate: [{\n      type: Input,\n      args: ['cdkDropListSortPredicate']\n    }],\n    autoScrollDisabled: [{\n      type: Input,\n      args: ['cdkDropListAutoScrollDisabled']\n    }],\n    autoScrollStep: [{\n      type: Input,\n      args: ['cdkDropListAutoScrollStep']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDropListDropped']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDropListEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDropListExited']\n    }],\n    sorted: [{\n      type: Output,\n      args: ['cdkDropListSorted']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\n\nclass CdkDragHandle {\n  constructor(element, parentDrag) {\n    this.element = element;\n    /** Emits when the state of the handle has changed. */\n\n    this._stateChanges = new Subject();\n    this._disabled = false;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(element.nativeElement, 'cdkDragHandle');\n    }\n\n    this._parentDrag = parentDrag;\n  }\n  /** Whether starting to drag through this handle is disabled. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    this._stateChanges.next(this);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n}\n\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {\n  return new (t || CdkDragHandle)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n};\n\nCdkDragHandle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragHandle,\n  selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n  hostAttrs: [1, \"cdk-drag-handle\"],\n  inputs: {\n    disabled: [\"cdkDragHandleDisabled\", \"disabled\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_HANDLE,\n    useExisting: CdkDragHandle\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragHandle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDragHandle]',\n      host: {\n        'class': 'cdk-drag-handle'\n      },\n      providers: [{\n        provide: CDK_DRAG_HANDLE,\n        useExisting: CdkDragHandle\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDragHandleDisabled']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n\nclass CdkDragPlaceholder {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n\n}\n\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {\n  return new (t || CdkDragPlaceholder)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkDragPlaceholder.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragPlaceholder,\n  selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n  inputs: {\n    data: \"data\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PLACEHOLDER,\n    useExisting: CdkDragPlaceholder\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPlaceholder]',\n      providers: [{\n        provide: CDK_DRAG_PLACEHOLDER,\n        useExisting: CdkDragPlaceholder\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n\nclass CdkDragPreview {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n    this._matchSize = false;\n  }\n  /** Whether the preview should preserve the same size as the item that is being dragged. */\n\n\n  get matchSize() {\n    return this._matchSize;\n  }\n\n  set matchSize(value) {\n    this._matchSize = coerceBooleanProperty(value);\n  }\n\n}\n\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {\n  return new (t || CdkDragPreview)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkDragPreview.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragPreview,\n  selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n  inputs: {\n    data: \"data\",\n    matchSize: \"matchSize\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PREVIEW,\n    useExisting: CdkDragPreview\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragPreview, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPreview]',\n      providers: [{\n        provide: CDK_DRAG_PREVIEW,\n        useExisting: CdkDragPreview\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    matchSize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\n\nclass CdkDrag {\n  constructor(\n  /** Element that the draggable is attached to. */\n  element,\n  /** Droppable container that the draggable is a part of. */\n  dropContainer,\n  /**\n   * @deprecated `_document` parameter no longer being used and will be removed.\n   * @breaking-change 12.0.0\n   */\n  _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n    this.element = element;\n    this.dropContainer = dropContainer;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._dir = _dir;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._selfHandle = _selfHandle;\n    this._parentDrag = _parentDrag;\n    this._destroyed = new Subject();\n    /** Emits when the user starts dragging the item. */\n\n    this.started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n\n    this.released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n\n    this.ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n\n    this.entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n\n    this.exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n\n    this.dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = new Observable(observer => {\n      const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n        source: this,\n        pointerPosition: movedEvent.pointerPosition,\n        event: movedEvent.event,\n        delta: movedEvent.delta,\n        distance: movedEvent.distance\n      }))).subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n    this._dragRef = dragDrop.createDrag(element, {\n      dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n      pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,\n      zIndex: config?.zIndex\n    });\n    this._dragRef.data = this; // We have to keep track of the drag instances in order to be able to match an element to\n    // a drag instance. We can't go through the global registry of `DragRef`, because the root\n    // element could be different.\n\n    CdkDrag._dragInstances.push(this);\n\n    if (config) {\n      this._assignDefaults(config);\n    } // Note that usually the container is assigned when the drop list is picks up the item, but in\n    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n    // where there are no items on the first change detection pass, but the items get picked up as\n    // soon as the user triggers another pass by dragging. This is a problem, because the item would\n    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n    // is too late since the two modes save different kinds of information. We work around it by\n    // assigning the drop container both from here and the list.\n\n\n    if (dropContainer) {\n      this._dragRef._withDropContainer(dropContainer._dropListRef);\n\n      dropContainer.addItem(this);\n    }\n\n    this._syncInputs(this._dragRef);\n\n    this._handleEvents(this._dragRef);\n  }\n  /** Whether starting to drag this element is disabled. */\n\n\n  get disabled() {\n    return this._disabled || this.dropContainer && this.dropContainer.disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n\n\n  getPlaceholderElement() {\n    return this._dragRef.getPlaceholderElement();\n  }\n  /** Returns the root draggable element. */\n\n\n  getRootElement() {\n    return this._dragRef.getRootElement();\n  }\n  /** Resets a standalone drag item to its initial position. */\n\n\n  reset() {\n    this._dragRef.reset();\n  }\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n\n\n  getFreeDragPosition() {\n    return this._dragRef.getFreeDragPosition();\n  }\n\n  ngAfterViewInit() {\n    // Normally this isn't in the zone, but it can cause major performance regressions for apps\n    // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n    this._ngZone.runOutsideAngular(() => {\n      // We need to wait for the zone to stabilize, in order for the reference\n      // element to be in the proper place in the DOM. This is mostly relevant\n      // for draggable elements inside portals since they get stamped out in\n      // their original DOM position and then they get transferred to the portal.\n      this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        this._updateRootElement();\n\n        this._setupHandlesListener();\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n    });\n  }\n\n  ngOnChanges(changes) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition']; // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    } // Skip the first change since it's being handled in `ngAfterViewInit`.\n\n\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.dropContainer) {\n      this.dropContainer.removeItem(this);\n    }\n\n    const index = CdkDrag._dragInstances.indexOf(this);\n\n    if (index > -1) {\n      CdkDrag._dragInstances.splice(index, 1);\n    } // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n\n\n    this._ngZone.runOutsideAngular(() => {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._dragRef.dispose();\n    });\n  }\n  /** Syncs the root element with the `DragRef`. */\n\n\n  _updateRootElement() {\n    const element = this.element.nativeElement;\n    let rootElement = element;\n\n    if (this.rootElementSelector) {\n      rootElement = element.closest !== undefined ? element.closest(this.rootElementSelector) : // Comment tag doesn't have closest method, so use parent's one.\n      element.parentElement?.closest(this.rootElementSelector);\n    }\n\n    if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      assertElementNode(rootElement, 'cdkDrag');\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n\n\n  _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n\n    if (!boundary) {\n      return null;\n    }\n\n    if (typeof boundary === 'string') {\n      return this.element.nativeElement.closest(boundary);\n    }\n\n    const element = coerceElement(boundary);\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !element.contains(this.element.nativeElement)) {\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n    }\n\n    return element;\n  }\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n\n\n  _syncInputs(ref) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const dragStartDelay = this.dragStartDelay;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          matchSize: this._previewTemplate.matchSize,\n          viewContainer: this._viewContainerRef\n        } : null;\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref.previewClass = this.previewClass;\n        ref.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(this.previewContainer || 'global');\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    }); // This only needs to be resolved once.\n\n    ref.beforeStarted.pipe(take(1)).subscribe(() => {\n      // If we managed to resolve a parent through DI, use it.\n      if (this._parentDrag) {\n        ref.withParent(this._parentDrag._dragRef);\n        return;\n      } // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n      // the item was projected into another item by something like `ngTemplateOutlet`.\n\n\n      let parent = this.element.nativeElement.parentElement;\n\n      while (parent) {\n        if (parent.classList.contains(DRAG_HOST_CLASS)) {\n          ref.withParent(CdkDrag._dragInstances.find(drag => {\n            return drag.element.nativeElement === parent;\n          })?._dragRef || null);\n          break;\n        }\n\n        parent = parent.parentElement;\n      }\n    });\n  }\n  /** Handles the events from the underlying `DragRef`. */\n\n\n  _handleEvents(ref) {\n    ref.started.subscribe(() => {\n      this.started.emit({\n        source: this\n      }); // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.released.subscribe(() => {\n      this.released.emit({\n        source: this\n      });\n    });\n    ref.ended.subscribe(event => {\n      this.ended.emit({\n        source: this,\n        distance: event.distance,\n        dropPoint: event.dropPoint\n      }); // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this,\n        currentIndex: event.currentIndex\n      });\n    });\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this,\n        distance: event.distance,\n        dropPoint: event.dropPoint\n      });\n    });\n  }\n  /** Assigns the default input values based on a provided config object. */\n\n\n  _assignDefaults(config) {\n    const {\n      lockAxis,\n      dragStartDelay,\n      constrainPosition,\n      previewClass,\n      boundaryElement,\n      draggingDisabled,\n      rootElementSelector,\n      previewContainer\n    } = config;\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.dragStartDelay = dragStartDelay || 0;\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n\n    if (constrainPosition) {\n      this.constrainPosition = constrainPosition;\n    }\n\n    if (previewClass) {\n      this.previewClass = previewClass;\n    }\n\n    if (boundaryElement) {\n      this.boundaryElement = boundaryElement;\n    }\n\n    if (rootElementSelector) {\n      this.rootElementSelector = rootElementSelector;\n    }\n\n    if (previewContainer) {\n      this.previewContainer = previewContainer;\n    }\n  }\n  /** Sets up the listener that syncs the handles with the drag ref. */\n\n\n  _setupHandlesListener() {\n    // Listen for any newly-added handles.\n    this._handles.changes.pipe(startWith(this._handles), // Sync the new handles with the DragRef.\n    tap(handles => {\n      const childHandleElements = handles.filter(handle => handle._parentDrag === this).map(handle => handle.element); // Usually handles are only allowed to be a descendant of the drag element, but if\n      // the consumer defined a different drag root, we should allow the drag element\n      // itself to be a handle too.\n\n      if (this._selfHandle && this.rootElementSelector) {\n        childHandleElements.push(this.element);\n      }\n\n      this._dragRef.withHandles(childHandleElements);\n    }), // Listen if the state of any of the handles changes.\n    switchMap(handles => {\n      return merge(...handles.map(item => {\n        return item._stateChanges.pipe(startWith(item));\n      }));\n    }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n      // Enabled/disable the handle that changed in the DragRef.\n      const dragRef = this._dragRef;\n      const handle = handleInstance.element.nativeElement;\n      handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n    });\n  }\n\n}\n\nCdkDrag._dragInstances = [];\n\nCdkDrag.ɵfac = function CdkDrag_Factory(t) {\n  return new (t || CdkDrag)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(DragDrop), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), i0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n};\n\nCdkDrag.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDrag,\n  selectors: [[\"\", \"cdkDrag\", \"\"]],\n  contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._handles = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-drag\"],\n  hostVars: 4,\n  hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    }\n  },\n  inputs: {\n    data: [\"cdkDragData\", \"data\"],\n    lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"],\n    rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"],\n    boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"],\n    dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"],\n    freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"],\n    disabled: [\"cdkDragDisabled\", \"disabled\"],\n    constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"],\n    previewClass: [\"cdkDragPreviewClass\", \"previewClass\"],\n    previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"]\n  },\n  outputs: {\n    started: \"cdkDragStarted\",\n    released: \"cdkDragReleased\",\n    ended: \"cdkDragEnded\",\n    entered: \"cdkDragEntered\",\n    exited: \"cdkDragExited\",\n    dropped: \"cdkDragDropped\",\n    moved: \"cdkDragMoved\"\n  },\n  exportAs: [\"cdkDrag\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDrag, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDrag]',\n      exportAs: 'cdkDrag',\n      host: {\n        'class': DRAG_HOST_CLASS,\n        '[class.cdk-drag-disabled]': 'disabled',\n        '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n      },\n      providers: [{\n        provide: CDK_DRAG_PARENT,\n        useExisting: CdkDrag\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DROP_LIST]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: DragDrop\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: CdkDragHandle,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_HANDLE]\n      }]\n    }, {\n      type: CdkDrag,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }]\n    }];\n  }, {\n    _handles: [{\n      type: ContentChildren,\n      args: [CDK_DRAG_HANDLE, {\n        descendants: true\n      }]\n    }],\n    _previewTemplate: [{\n      type: ContentChild,\n      args: [CDK_DRAG_PREVIEW]\n    }],\n    _placeholderTemplate: [{\n      type: ContentChild,\n      args: [CDK_DRAG_PLACEHOLDER]\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDragData']\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDragLockAxis']\n    }],\n    rootElementSelector: [{\n      type: Input,\n      args: ['cdkDragRootElement']\n    }],\n    boundaryElement: [{\n      type: Input,\n      args: ['cdkDragBoundary']\n    }],\n    dragStartDelay: [{\n      type: Input,\n      args: ['cdkDragStartDelay']\n    }],\n    freeDragPosition: [{\n      type: Input,\n      args: ['cdkDragFreeDragPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDragDisabled']\n    }],\n    constrainPosition: [{\n      type: Input,\n      args: ['cdkDragConstrainPosition']\n    }],\n    previewClass: [{\n      type: Input,\n      args: ['cdkDragPreviewClass']\n    }],\n    previewContainer: [{\n      type: Input,\n      args: ['cdkDragPreviewContainer']\n    }],\n    started: [{\n      type: Output,\n      args: ['cdkDragStarted']\n    }],\n    released: [{\n      type: Output,\n      args: ['cdkDragReleased']\n    }],\n    ended: [{\n      type: Output,\n      args: ['cdkDragEnded']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDragEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDragExited']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDragDropped']\n    }],\n    moved: [{\n      type: Output,\n      args: ['cdkDragMoved']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass DragDropModule {}\n\nDragDropModule.ɵfac = function DragDropModule_Factory(t) {\n  return new (t || DragDropModule)();\n};\n\nDragDropModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DragDropModule\n});\nDragDropModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DragDrop],\n  imports: [CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDropModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],\n      exports: [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],\n      providers: [DragDrop]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };","map":{"version":3,"names":["i0","Injectable","Inject","InjectionToken","Directive","Input","EventEmitter","Optional","SkipSelf","Output","Self","ContentChildren","ContentChild","NgModule","DOCUMENT","i1","CdkScrollableModule","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","coerceBooleanProperty","coerceElement","coerceArray","coerceNumberProperty","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","takeUntil","startWith","map","take","tap","switchMap","i3","extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","_viewportRuler","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","Set","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","handle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_dropContainer","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","pipe","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","withItems","items","previousItems","draggedItems","filter","every","_cacheItems","connectedTo","slice","withOrientation","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","sort","a","b","current","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","ɵfac","NgZone","ɵprov","args","providedIn","decorators","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","ViewportRuler","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","ɵdir","provide","useExisting","exportAs","providers","CDK_DRAG_CONFIG","assertElementNode","Error","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","id","_unsortedItems","ngDevMode","_dropListRef","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","addItem","_syncItemsWithRef","removeItem","getSortedItems","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","ref","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","ElementRef","ChangeDetectorRef","ScrollDispatcher","Directionality","useValue","host","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","TemplateRef","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","DRAG_HOST_CLASS","CdkDrag","_viewContainerRef","_selfHandle","subscription","movedEvent","_syncInputs","ngAfterViewInit","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","rootElementSelector","closest","_getBoundaryElement","boundary","dir","childHandleElements","handleInstance","dragRef","ViewContainerRef","descendants","DragDropModule","ɵmod","ɵinj","declarations","exports"],"sources":["C:/Users/Francisco_Romero/Documents/Curso-angular-utn/Practicos-UTN/appPractico1/node_modules/@angular/cdk/fesm2020/drag-drop.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, Optional, SkipSelf, Output, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = _getEventTarget(event);\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition\n            ? cachedPosition.scrollPosition\n            : this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item,\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(current => current.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this.sortPredicate(index, item, this) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nDragDropRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nDragDrop.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDrop, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkDropListGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkDropListGroup, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i3.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDropList.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkDropList, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n        // Prevent child drop lists from picking up the same group as their parent.\n        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n    ], exportAs: [\"cdkDropList\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragHandle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkDragHandle, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragPlaceholder.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkDragPlaceholder, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n}\nCdkDragPreview.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragPreview.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkDragPreview, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({\n                source: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n}\nCdkDrag._dragInstances = [];\nCdkDrag.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i3.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDrag.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: CdkDrag, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDragDropModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDropModule, declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkScrollableModule,\n        CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] });\nDragDropModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}